
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  avatar: string | null
  token42_api: string
  username: string
  email: string | null
  phoneNumber: string | null
  tokenGoogle_api: string | null
  tokenSms_api: string | null
  losses: number
  wins: number
  ladder_level: number
}

/**
 * Model UserInRoom
 * 
 */
export type UserInRoom = {
  userId: number
  roomId: number
  user_role: string
}

/**
 * Model Room
 * 
 */
export type Room = {
  id: number
  name: string
  type: string
  password: string
}

/**
 * Model MessageRoom
 * 
 */
export type MessageRoom = {
  id: number
  createdAt: Date
  from: number
  to_room: number
  content_msg: string
  wasRead: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userInRoom`: Exposes CRUD operations for the **UserInRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInRooms
    * const userInRooms = await prisma.userInRoom.findMany()
    * ```
    */
  get userInRoom(): Prisma.UserInRoomDelegate<GlobalReject>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<GlobalReject>;

  /**
   * `prisma.messageRoom`: Exposes CRUD operations for the **MessageRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageRooms
    * const messageRooms = await prisma.messageRoom.findMany()
    * ```
    */
  get messageRoom(): Prisma.MessageRoomDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.0.0
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    UserInRoom: 'UserInRoom',
    Room: 'Room',
    MessageRoom: 'MessageRoom'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    rooms: number
    messages: number
  }

  export type UserCountOutputTypeSelect = {
    rooms?: boolean
    messages?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type RoomCountOutputType
   */


  export type RoomCountOutputType = {
    users: number
    messages: number
  }

  export type RoomCountOutputTypeSelect = {
    users?: boolean
    messages?: boolean
  }

  export type RoomCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoomCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoomCountOutputType
    : S extends undefined
    ? never
    : S extends RoomCountOutputTypeArgs
    ?'include' extends U
    ? RoomCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RoomCountOutputType ? RoomCountOutputType[P] : never
  } 
    : RoomCountOutputType
  : RoomCountOutputType




  // Custom InputTypes

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     * 
    **/
    select?: RoomCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    avatar: string | null
    token42_api: string | null
    username: string | null
    email: string | null
    phoneNumber: string | null
    tokenGoogle_api: string | null
    tokenSms_api: string | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    avatar: string | null
    token42_api: string | null
    username: string | null
    email: string | null
    phoneNumber: string | null
    tokenGoogle_api: string | null
    tokenSms_api: string | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    avatar: number
    token42_api: number
    username: number
    email: number
    phoneNumber: number
    tokenGoogle_api: number
    tokenSms_api: number
    losses: number
    wins: number
    ladder_level: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    avatar?: true
    token42_api?: true
    username?: true
    email?: true
    phoneNumber?: true
    tokenGoogle_api?: true
    tokenSms_api?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    avatar?: true
    token42_api?: true
    username?: true
    email?: true
    phoneNumber?: true
    tokenGoogle_api?: true
    tokenSms_api?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    avatar?: true
    token42_api?: true
    username?: true
    email?: true
    phoneNumber?: true
    tokenGoogle_api?: true
    tokenSms_api?: true
    losses?: true
    wins?: true
    ladder_level?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    avatar: string | null
    token42_api: string
    username: string
    email: string | null
    phoneNumber: string | null
    tokenGoogle_api: string | null
    tokenSms_api: string | null
    losses: number
    wins: number
    ladder_level: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    avatar?: boolean
    token42_api?: boolean
    username?: boolean
    email?: boolean
    phoneNumber?: boolean
    tokenGoogle_api?: boolean
    tokenSms_api?: boolean
    losses?: boolean
    wins?: boolean
    ladder_level?: boolean
    rooms?: boolean | UserInRoomFindManyArgs
    messages?: boolean | MessageRoomFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    rooms?: boolean | UserInRoomFindManyArgs
    messages?: boolean | MessageRoomFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'rooms' ? Array < UserInRoomGetPayload<S['include'][P]>>  :
        P extends 'messages' ? Array < MessageRoomGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'rooms' ? Array < UserInRoomGetPayload<S['select'][P]>>  :
        P extends 'messages' ? Array < MessageRoomGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rooms<T extends UserInRoomFindManyArgs = {}>(args?: Subset<T, UserInRoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserInRoom>>, PrismaPromise<Array<UserInRoomGetPayload<T>>>>;

    messages<T extends MessageRoomFindManyArgs = {}>(args?: Subset<T, MessageRoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<MessageRoom>>, PrismaPromise<Array<MessageRoomGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserInRoom
   */


  export type AggregateUserInRoom = {
    _count: UserInRoomCountAggregateOutputType | null
    _avg: UserInRoomAvgAggregateOutputType | null
    _sum: UserInRoomSumAggregateOutputType | null
    _min: UserInRoomMinAggregateOutputType | null
    _max: UserInRoomMaxAggregateOutputType | null
  }

  export type UserInRoomAvgAggregateOutputType = {
    userId: number | null
    roomId: number | null
  }

  export type UserInRoomSumAggregateOutputType = {
    userId: number | null
    roomId: number | null
  }

  export type UserInRoomMinAggregateOutputType = {
    userId: number | null
    roomId: number | null
    user_role: string | null
  }

  export type UserInRoomMaxAggregateOutputType = {
    userId: number | null
    roomId: number | null
    user_role: string | null
  }

  export type UserInRoomCountAggregateOutputType = {
    userId: number
    roomId: number
    user_role: number
    _all: number
  }


  export type UserInRoomAvgAggregateInputType = {
    userId?: true
    roomId?: true
  }

  export type UserInRoomSumAggregateInputType = {
    userId?: true
    roomId?: true
  }

  export type UserInRoomMinAggregateInputType = {
    userId?: true
    roomId?: true
    user_role?: true
  }

  export type UserInRoomMaxAggregateInputType = {
    userId?: true
    roomId?: true
    user_role?: true
  }

  export type UserInRoomCountAggregateInputType = {
    userId?: true
    roomId?: true
    user_role?: true
    _all?: true
  }

  export type UserInRoomAggregateArgs = {
    /**
     * Filter which UserInRoom to aggregate.
     * 
    **/
    where?: UserInRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<UserInRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserInRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInRooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInRooms
    **/
    _count?: true | UserInRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserInRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserInRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInRoomMaxAggregateInputType
  }

  export type GetUserInRoomAggregateType<T extends UserInRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInRoom[P]>
      : GetScalarType<T[P], AggregateUserInRoom[P]>
  }




  export type UserInRoomGroupByArgs = {
    where?: UserInRoomWhereInput
    orderBy?: Enumerable<UserInRoomOrderByWithAggregationInput>
    by: Array<UserInRoomScalarFieldEnum>
    having?: UserInRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInRoomCountAggregateInputType | true
    _avg?: UserInRoomAvgAggregateInputType
    _sum?: UserInRoomSumAggregateInputType
    _min?: UserInRoomMinAggregateInputType
    _max?: UserInRoomMaxAggregateInputType
  }


  export type UserInRoomGroupByOutputType = {
    userId: number
    roomId: number
    user_role: string
    _count: UserInRoomCountAggregateOutputType | null
    _avg: UserInRoomAvgAggregateOutputType | null
    _sum: UserInRoomSumAggregateOutputType | null
    _min: UserInRoomMinAggregateOutputType | null
    _max: UserInRoomMaxAggregateOutputType | null
  }

  type GetUserInRoomGroupByPayload<T extends UserInRoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserInRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInRoomGroupByOutputType[P]>
            : GetScalarType<T[P], UserInRoomGroupByOutputType[P]>
        }
      >
    >


  export type UserInRoomSelect = {
    user?: boolean | UserArgs
    userId?: boolean
    room?: boolean | RoomArgs
    roomId?: boolean
    user_role?: boolean
  }

  export type UserInRoomInclude = {
    user?: boolean | UserArgs
    room?: boolean | RoomArgs
  }

  export type UserInRoomGetPayload<
    S extends boolean | null | undefined | UserInRoomArgs,
    U = keyof S
      > = S extends true
        ? UserInRoom
    : S extends undefined
    ? never
    : S extends UserInRoomArgs | UserInRoomFindManyArgs
    ?'include' extends U
    ? UserInRoom  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'room' ? RoomGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'room' ? RoomGetPayload<S['select'][P]> :  P extends keyof UserInRoom ? UserInRoom[P] : never
  } 
    : UserInRoom
  : UserInRoom


  type UserInRoomCountArgs = Merge<
    Omit<UserInRoomFindManyArgs, 'select' | 'include'> & {
      select?: UserInRoomCountAggregateInputType | true
    }
  >

  export interface UserInRoomDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserInRoom that matches the filter.
     * @param {UserInRoomFindUniqueArgs} args - Arguments to find a UserInRoom
     * @example
     * // Get one UserInRoom
     * const userInRoom = await prisma.userInRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserInRoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserInRoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserInRoom'> extends True ? CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>> : CheckSelect<T, Prisma__UserInRoomClient<UserInRoom | null >, Prisma__UserInRoomClient<UserInRoomGetPayload<T> | null >>

    /**
     * Find the first UserInRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomFindFirstArgs} args - Arguments to find a UserInRoom
     * @example
     * // Get one UserInRoom
     * const userInRoom = await prisma.userInRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserInRoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserInRoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserInRoom'> extends True ? CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>> : CheckSelect<T, Prisma__UserInRoomClient<UserInRoom | null >, Prisma__UserInRoomClient<UserInRoomGetPayload<T> | null >>

    /**
     * Find zero or more UserInRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInRooms
     * const userInRooms = await prisma.userInRoom.findMany()
     * 
     * // Get first 10 UserInRooms
     * const userInRooms = await prisma.userInRoom.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userInRoomWithUserIdOnly = await prisma.userInRoom.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserInRoomFindManyArgs>(
      args?: SelectSubset<T, UserInRoomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserInRoom>>, PrismaPromise<Array<UserInRoomGetPayload<T>>>>

    /**
     * Create a UserInRoom.
     * @param {UserInRoomCreateArgs} args - Arguments to create a UserInRoom.
     * @example
     * // Create one UserInRoom
     * const UserInRoom = await prisma.userInRoom.create({
     *   data: {
     *     // ... data to create a UserInRoom
     *   }
     * })
     * 
    **/
    create<T extends UserInRoomCreateArgs>(
      args: SelectSubset<T, UserInRoomCreateArgs>
    ): CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>>

    /**
     * Create many UserInRooms.
     *     @param {UserInRoomCreateManyArgs} args - Arguments to create many UserInRooms.
     *     @example
     *     // Create many UserInRooms
     *     const userInRoom = await prisma.userInRoom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserInRoomCreateManyArgs>(
      args?: SelectSubset<T, UserInRoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserInRoom.
     * @param {UserInRoomDeleteArgs} args - Arguments to delete one UserInRoom.
     * @example
     * // Delete one UserInRoom
     * const UserInRoom = await prisma.userInRoom.delete({
     *   where: {
     *     // ... filter to delete one UserInRoom
     *   }
     * })
     * 
    **/
    delete<T extends UserInRoomDeleteArgs>(
      args: SelectSubset<T, UserInRoomDeleteArgs>
    ): CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>>

    /**
     * Update one UserInRoom.
     * @param {UserInRoomUpdateArgs} args - Arguments to update one UserInRoom.
     * @example
     * // Update one UserInRoom
     * const userInRoom = await prisma.userInRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserInRoomUpdateArgs>(
      args: SelectSubset<T, UserInRoomUpdateArgs>
    ): CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>>

    /**
     * Delete zero or more UserInRooms.
     * @param {UserInRoomDeleteManyArgs} args - Arguments to filter UserInRooms to delete.
     * @example
     * // Delete a few UserInRooms
     * const { count } = await prisma.userInRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserInRoomDeleteManyArgs>(
      args?: SelectSubset<T, UserInRoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInRooms
     * const userInRoom = await prisma.userInRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserInRoomUpdateManyArgs>(
      args: SelectSubset<T, UserInRoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInRoom.
     * @param {UserInRoomUpsertArgs} args - Arguments to update or create a UserInRoom.
     * @example
     * // Update or create a UserInRoom
     * const userInRoom = await prisma.userInRoom.upsert({
     *   create: {
     *     // ... data to create a UserInRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInRoom we want to update
     *   }
     * })
    **/
    upsert<T extends UserInRoomUpsertArgs>(
      args: SelectSubset<T, UserInRoomUpsertArgs>
    ): CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>>

    /**
     * Find one UserInRoom that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserInRoomFindUniqueOrThrowArgs} args - Arguments to find a UserInRoom
     * @example
     * // Get one UserInRoom
     * const userInRoom = await prisma.userInRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserInRoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserInRoomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>>

    /**
     * Find the first UserInRoom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomFindFirstOrThrowArgs} args - Arguments to find a UserInRoom
     * @example
     * // Get one UserInRoom
     * const userInRoom = await prisma.userInRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserInRoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserInRoomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserInRoomClient<UserInRoom>, Prisma__UserInRoomClient<UserInRoomGetPayload<T>>>

    /**
     * Count the number of UserInRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomCountArgs} args - Arguments to filter UserInRooms to count.
     * @example
     * // Count the number of UserInRooms
     * const count = await prisma.userInRoom.count({
     *   where: {
     *     // ... the filter for the UserInRooms we want to count
     *   }
     * })
    **/
    count<T extends UserInRoomCountArgs>(
      args?: Subset<T, UserInRoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInRoomAggregateArgs>(args: Subset<T, UserInRoomAggregateArgs>): PrismaPromise<GetUserInRoomAggregateType<T>>

    /**
     * Group by UserInRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInRoomGroupByArgs['orderBy'] }
        : { orderBy?: UserInRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInRoomGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserInRoomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserInRoom base type for findUnique actions
   */
  export type UserInRoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * Filter, which UserInRoom to fetch.
     * 
    **/
    where: UserInRoomWhereUniqueInput
  }

  /**
   * UserInRoom: findUnique
   */
  export interface UserInRoomFindUniqueArgs extends UserInRoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserInRoom base type for findFirst actions
   */
  export type UserInRoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * Filter, which UserInRoom to fetch.
     * 
    **/
    where?: UserInRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<UserInRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInRooms.
     * 
    **/
    cursor?: UserInRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInRooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInRooms.
     * 
    **/
    distinct?: Enumerable<UserInRoomScalarFieldEnum>
  }

  /**
   * UserInRoom: findFirst
   */
  export interface UserInRoomFindFirstArgs extends UserInRoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserInRoom findMany
   */
  export type UserInRoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * Filter, which UserInRooms to fetch.
     * 
    **/
    where?: UserInRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<UserInRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInRooms.
     * 
    **/
    cursor?: UserInRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInRooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserInRoomScalarFieldEnum>
  }


  /**
   * UserInRoom create
   */
  export type UserInRoomCreateArgs = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * The data needed to create a UserInRoom.
     * 
    **/
    data: XOR<UserInRoomCreateInput, UserInRoomUncheckedCreateInput>
  }


  /**
   * UserInRoom createMany
   */
  export type UserInRoomCreateManyArgs = {
    /**
     * The data used to create many UserInRooms.
     * 
    **/
    data: Enumerable<UserInRoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserInRoom update
   */
  export type UserInRoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * The data needed to update a UserInRoom.
     * 
    **/
    data: XOR<UserInRoomUpdateInput, UserInRoomUncheckedUpdateInput>
    /**
     * Choose, which UserInRoom to update.
     * 
    **/
    where: UserInRoomWhereUniqueInput
  }


  /**
   * UserInRoom updateMany
   */
  export type UserInRoomUpdateManyArgs = {
    /**
     * The data used to update UserInRooms.
     * 
    **/
    data: XOR<UserInRoomUpdateManyMutationInput, UserInRoomUncheckedUpdateManyInput>
    /**
     * Filter which UserInRooms to update
     * 
    **/
    where?: UserInRoomWhereInput
  }


  /**
   * UserInRoom upsert
   */
  export type UserInRoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * The filter to search for the UserInRoom to update in case it exists.
     * 
    **/
    where: UserInRoomWhereUniqueInput
    /**
     * In case the UserInRoom found by the `where` argument doesn't exist, create a new UserInRoom with this data.
     * 
    **/
    create: XOR<UserInRoomCreateInput, UserInRoomUncheckedCreateInput>
    /**
     * In case the UserInRoom was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserInRoomUpdateInput, UserInRoomUncheckedUpdateInput>
  }


  /**
   * UserInRoom delete
   */
  export type UserInRoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
    /**
     * Filter which UserInRoom to delete.
     * 
    **/
    where: UserInRoomWhereUniqueInput
  }


  /**
   * UserInRoom deleteMany
   */
  export type UserInRoomDeleteManyArgs = {
    /**
     * Filter which UserInRooms to delete
     * 
    **/
    where?: UserInRoomWhereInput
  }


  /**
   * UserInRoom: findUniqueOrThrow
   */
  export type UserInRoomFindUniqueOrThrowArgs = UserInRoomFindUniqueArgsBase
      

  /**
   * UserInRoom: findFirstOrThrow
   */
  export type UserInRoomFindFirstOrThrowArgs = UserInRoomFindFirstArgsBase
      

  /**
   * UserInRoom without action
   */
  export type UserInRoomArgs = {
    /**
     * Select specific fields to fetch from the UserInRoom
     * 
    **/
    select?: UserInRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInRoomInclude | null
  }



  /**
   * Model Room
   */


  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    password: string | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    password: string | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    name: number
    type: number
    password: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    password?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    password?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    password?: true
    _all?: true
  }

  export type RoomAggregateArgs = {
    /**
     * Filter which Room to aggregate.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs = {
    where?: RoomWhereInput
    orderBy?: Enumerable<RoomOrderByWithAggregationInput>
    by: Array<RoomScalarFieldEnum>
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }


  export type RoomGroupByOutputType = {
    id: number
    name: string
    type: string
    password: string
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    users?: boolean | UserInRoomFindManyArgs
    password?: boolean
    messages?: boolean | MessageRoomFindManyArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomInclude = {
    users?: boolean | UserInRoomFindManyArgs
    messages?: boolean | MessageRoomFindManyArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomGetPayload<
    S extends boolean | null | undefined | RoomArgs,
    U = keyof S
      > = S extends true
        ? Room
    : S extends undefined
    ? never
    : S extends RoomArgs | RoomFindManyArgs
    ?'include' extends U
    ? Room  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UserInRoomGetPayload<S['include'][P]>>  :
        P extends 'messages' ? Array < MessageRoomGetPayload<S['include'][P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UserInRoomGetPayload<S['select'][P]>>  :
        P extends 'messages' ? Array < MessageRoomGetPayload<S['select'][P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Room ? Room[P] : never
  } 
    : Room
  : Room


  type RoomCountArgs = Merge<
    Omit<RoomFindManyArgs, 'select' | 'include'> & {
      select?: RoomCountAggregateInputType | true
    }
  >

  export interface RoomDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Room'> extends True ? CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>> : CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Room'> extends True ? CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>> : CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs>(
      args?: SelectSubset<T, RoomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Room>>, PrismaPromise<Array<RoomGetPayload<T>>>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs>(
      args: SelectSubset<T, RoomCreateArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs>(
      args?: SelectSubset<T, RoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs>(
      args: SelectSubset<T, RoomDeleteArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs>(
      args: SelectSubset<T, RoomUpdateArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs>(
      args?: SelectSubset<T, RoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs>(
      args: SelectSubset<T, RoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs>(
      args: SelectSubset<T, RoomUpsertArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Find one Room that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Find the first Room that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserInRoomFindManyArgs = {}>(args?: Subset<T, UserInRoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserInRoom>>, PrismaPromise<Array<UserInRoomGetPayload<T>>>>;

    messages<T extends MessageRoomFindManyArgs = {}>(args?: Subset<T, MessageRoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<MessageRoom>>, PrismaPromise<Array<MessageRoomGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Room base type for findUnique actions
   */
  export type RoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where: RoomWhereUniqueInput
  }

  /**
   * Room: findUnique
   */
  export interface RoomFindUniqueArgs extends RoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room base type for findFirst actions
   */
  export type RoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     * 
    **/
    distinct?: Enumerable<RoomScalarFieldEnum>
  }

  /**
   * Room: findFirst
   */
  export interface RoomFindFirstArgs extends RoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findMany
   */
  export type RoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Rooms to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room create
   */
  export type RoomCreateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The data needed to create a Room.
     * 
    **/
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs = {
    /**
     * The data used to create many Rooms.
     * 
    **/
    data: Enumerable<RoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The data needed to update a Room.
     * 
    **/
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs = {
    /**
     * The data used to update Rooms.
     * 
    **/
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The filter to search for the Room to update in case it exists.
     * 
    **/
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     * 
    **/
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter which Room to delete.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs = {
    /**
     * Filter which Rooms to delete
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room: findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs = RoomFindUniqueArgsBase
      

  /**
   * Room: findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs = RoomFindFirstArgsBase
      

  /**
   * Room without action
   */
  export type RoomArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
  }



  /**
   * Model MessageRoom
   */


  export type AggregateMessageRoom = {
    _count: MessageRoomCountAggregateOutputType | null
    _avg: MessageRoomAvgAggregateOutputType | null
    _sum: MessageRoomSumAggregateOutputType | null
    _min: MessageRoomMinAggregateOutputType | null
    _max: MessageRoomMaxAggregateOutputType | null
  }

  export type MessageRoomAvgAggregateOutputType = {
    id: number | null
    from: number | null
    to_room: number | null
  }

  export type MessageRoomSumAggregateOutputType = {
    id: number | null
    from: number | null
    to_room: number | null
  }

  export type MessageRoomMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    from: number | null
    to_room: number | null
    content_msg: string | null
    wasRead: boolean | null
  }

  export type MessageRoomMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    from: number | null
    to_room: number | null
    content_msg: string | null
    wasRead: boolean | null
  }

  export type MessageRoomCountAggregateOutputType = {
    id: number
    createdAt: number
    from: number
    to_room: number
    content_msg: number
    wasRead: number
    _all: number
  }


  export type MessageRoomAvgAggregateInputType = {
    id?: true
    from?: true
    to_room?: true
  }

  export type MessageRoomSumAggregateInputType = {
    id?: true
    from?: true
    to_room?: true
  }

  export type MessageRoomMinAggregateInputType = {
    id?: true
    createdAt?: true
    from?: true
    to_room?: true
    content_msg?: true
    wasRead?: true
  }

  export type MessageRoomMaxAggregateInputType = {
    id?: true
    createdAt?: true
    from?: true
    to_room?: true
    content_msg?: true
    wasRead?: true
  }

  export type MessageRoomCountAggregateInputType = {
    id?: true
    createdAt?: true
    from?: true
    to_room?: true
    content_msg?: true
    wasRead?: true
    _all?: true
  }

  export type MessageRoomAggregateArgs = {
    /**
     * Filter which MessageRoom to aggregate.
     * 
    **/
    where?: MessageRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<MessageRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MessageRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageRooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageRooms
    **/
    _count?: true | MessageRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageRoomMaxAggregateInputType
  }

  export type GetMessageRoomAggregateType<T extends MessageRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageRoom[P]>
      : GetScalarType<T[P], AggregateMessageRoom[P]>
  }




  export type MessageRoomGroupByArgs = {
    where?: MessageRoomWhereInput
    orderBy?: Enumerable<MessageRoomOrderByWithAggregationInput>
    by: Array<MessageRoomScalarFieldEnum>
    having?: MessageRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageRoomCountAggregateInputType | true
    _avg?: MessageRoomAvgAggregateInputType
    _sum?: MessageRoomSumAggregateInputType
    _min?: MessageRoomMinAggregateInputType
    _max?: MessageRoomMaxAggregateInputType
  }


  export type MessageRoomGroupByOutputType = {
    id: number
    createdAt: Date
    from: number
    to_room: number
    content_msg: string
    wasRead: boolean
    _count: MessageRoomCountAggregateOutputType | null
    _avg: MessageRoomAvgAggregateOutputType | null
    _sum: MessageRoomSumAggregateOutputType | null
    _min: MessageRoomMinAggregateOutputType | null
    _max: MessageRoomMaxAggregateOutputType | null
  }

  type GetMessageRoomGroupByPayload<T extends MessageRoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MessageRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageRoomGroupByOutputType[P]>
            : GetScalarType<T[P], MessageRoomGroupByOutputType[P]>
        }
      >
    >


  export type MessageRoomSelect = {
    id?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    from?: boolean
    room?: boolean | RoomArgs
    to_room?: boolean
    content_msg?: boolean
    wasRead?: boolean
  }

  export type MessageRoomInclude = {
    user?: boolean | UserArgs
    room?: boolean | RoomArgs
  }

  export type MessageRoomGetPayload<
    S extends boolean | null | undefined | MessageRoomArgs,
    U = keyof S
      > = S extends true
        ? MessageRoom
    : S extends undefined
    ? never
    : S extends MessageRoomArgs | MessageRoomFindManyArgs
    ?'include' extends U
    ? MessageRoom  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'room' ? RoomGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'room' ? RoomGetPayload<S['select'][P]> :  P extends keyof MessageRoom ? MessageRoom[P] : never
  } 
    : MessageRoom
  : MessageRoom


  type MessageRoomCountArgs = Merge<
    Omit<MessageRoomFindManyArgs, 'select' | 'include'> & {
      select?: MessageRoomCountAggregateInputType | true
    }
  >

  export interface MessageRoomDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one MessageRoom that matches the filter.
     * @param {MessageRoomFindUniqueArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageRoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageRoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MessageRoom'> extends True ? CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>> : CheckSelect<T, Prisma__MessageRoomClient<MessageRoom | null >, Prisma__MessageRoomClient<MessageRoomGetPayload<T> | null >>

    /**
     * Find the first MessageRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomFindFirstArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageRoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageRoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MessageRoom'> extends True ? CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>> : CheckSelect<T, Prisma__MessageRoomClient<MessageRoom | null >, Prisma__MessageRoomClient<MessageRoomGetPayload<T> | null >>

    /**
     * Find zero or more MessageRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageRooms
     * const messageRooms = await prisma.messageRoom.findMany()
     * 
     * // Get first 10 MessageRooms
     * const messageRooms = await prisma.messageRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageRoomWithIdOnly = await prisma.messageRoom.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageRoomFindManyArgs>(
      args?: SelectSubset<T, MessageRoomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<MessageRoom>>, PrismaPromise<Array<MessageRoomGetPayload<T>>>>

    /**
     * Create a MessageRoom.
     * @param {MessageRoomCreateArgs} args - Arguments to create a MessageRoom.
     * @example
     * // Create one MessageRoom
     * const MessageRoom = await prisma.messageRoom.create({
     *   data: {
     *     // ... data to create a MessageRoom
     *   }
     * })
     * 
    **/
    create<T extends MessageRoomCreateArgs>(
      args: SelectSubset<T, MessageRoomCreateArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Create many MessageRooms.
     *     @param {MessageRoomCreateManyArgs} args - Arguments to create many MessageRooms.
     *     @example
     *     // Create many MessageRooms
     *     const messageRoom = await prisma.messageRoom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageRoomCreateManyArgs>(
      args?: SelectSubset<T, MessageRoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a MessageRoom.
     * @param {MessageRoomDeleteArgs} args - Arguments to delete one MessageRoom.
     * @example
     * // Delete one MessageRoom
     * const MessageRoom = await prisma.messageRoom.delete({
     *   where: {
     *     // ... filter to delete one MessageRoom
     *   }
     * })
     * 
    **/
    delete<T extends MessageRoomDeleteArgs>(
      args: SelectSubset<T, MessageRoomDeleteArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Update one MessageRoom.
     * @param {MessageRoomUpdateArgs} args - Arguments to update one MessageRoom.
     * @example
     * // Update one MessageRoom
     * const messageRoom = await prisma.messageRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageRoomUpdateArgs>(
      args: SelectSubset<T, MessageRoomUpdateArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Delete zero or more MessageRooms.
     * @param {MessageRoomDeleteManyArgs} args - Arguments to filter MessageRooms to delete.
     * @example
     * // Delete a few MessageRooms
     * const { count } = await prisma.messageRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageRoomDeleteManyArgs>(
      args?: SelectSubset<T, MessageRoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageRooms
     * const messageRoom = await prisma.messageRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageRoomUpdateManyArgs>(
      args: SelectSubset<T, MessageRoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one MessageRoom.
     * @param {MessageRoomUpsertArgs} args - Arguments to update or create a MessageRoom.
     * @example
     * // Update or create a MessageRoom
     * const messageRoom = await prisma.messageRoom.upsert({
     *   create: {
     *     // ... data to create a MessageRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageRoom we want to update
     *   }
     * })
    **/
    upsert<T extends MessageRoomUpsertArgs>(
      args: SelectSubset<T, MessageRoomUpsertArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Find one MessageRoom that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MessageRoomFindUniqueOrThrowArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageRoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MessageRoomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Find the first MessageRoom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomFindFirstOrThrowArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageRoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MessageRoomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Count the number of MessageRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomCountArgs} args - Arguments to filter MessageRooms to count.
     * @example
     * // Count the number of MessageRooms
     * const count = await prisma.messageRoom.count({
     *   where: {
     *     // ... the filter for the MessageRooms we want to count
     *   }
     * })
    **/
    count<T extends MessageRoomCountArgs>(
      args?: Subset<T, MessageRoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageRoomAggregateArgs>(args: Subset<T, MessageRoomAggregateArgs>): PrismaPromise<GetMessageRoomAggregateType<T>>

    /**
     * Group by MessageRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageRoomGroupByArgs['orderBy'] }
        : { orderBy?: MessageRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageRoomGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageRoomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * MessageRoom base type for findUnique actions
   */
  export type MessageRoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter, which MessageRoom to fetch.
     * 
    **/
    where: MessageRoomWhereUniqueInput
  }

  /**
   * MessageRoom: findUnique
   */
  export interface MessageRoomFindUniqueArgs extends MessageRoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MessageRoom base type for findFirst actions
   */
  export type MessageRoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter, which MessageRoom to fetch.
     * 
    **/
    where?: MessageRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<MessageRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageRooms.
     * 
    **/
    cursor?: MessageRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageRooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageRooms.
     * 
    **/
    distinct?: Enumerable<MessageRoomScalarFieldEnum>
  }

  /**
   * MessageRoom: findFirst
   */
  export interface MessageRoomFindFirstArgs extends MessageRoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MessageRoom findMany
   */
  export type MessageRoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter, which MessageRooms to fetch.
     * 
    **/
    where?: MessageRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<MessageRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageRooms.
     * 
    **/
    cursor?: MessageRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageRooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MessageRoomScalarFieldEnum>
  }


  /**
   * MessageRoom create
   */
  export type MessageRoomCreateArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * The data needed to create a MessageRoom.
     * 
    **/
    data: XOR<MessageRoomCreateInput, MessageRoomUncheckedCreateInput>
  }


  /**
   * MessageRoom createMany
   */
  export type MessageRoomCreateManyArgs = {
    /**
     * The data used to create many MessageRooms.
     * 
    **/
    data: Enumerable<MessageRoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MessageRoom update
   */
  export type MessageRoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * The data needed to update a MessageRoom.
     * 
    **/
    data: XOR<MessageRoomUpdateInput, MessageRoomUncheckedUpdateInput>
    /**
     * Choose, which MessageRoom to update.
     * 
    **/
    where: MessageRoomWhereUniqueInput
  }


  /**
   * MessageRoom updateMany
   */
  export type MessageRoomUpdateManyArgs = {
    /**
     * The data used to update MessageRooms.
     * 
    **/
    data: XOR<MessageRoomUpdateManyMutationInput, MessageRoomUncheckedUpdateManyInput>
    /**
     * Filter which MessageRooms to update
     * 
    **/
    where?: MessageRoomWhereInput
  }


  /**
   * MessageRoom upsert
   */
  export type MessageRoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * The filter to search for the MessageRoom to update in case it exists.
     * 
    **/
    where: MessageRoomWhereUniqueInput
    /**
     * In case the MessageRoom found by the `where` argument doesn't exist, create a new MessageRoom with this data.
     * 
    **/
    create: XOR<MessageRoomCreateInput, MessageRoomUncheckedCreateInput>
    /**
     * In case the MessageRoom was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MessageRoomUpdateInput, MessageRoomUncheckedUpdateInput>
  }


  /**
   * MessageRoom delete
   */
  export type MessageRoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter which MessageRoom to delete.
     * 
    **/
    where: MessageRoomWhereUniqueInput
  }


  /**
   * MessageRoom deleteMany
   */
  export type MessageRoomDeleteManyArgs = {
    /**
     * Filter which MessageRooms to delete
     * 
    **/
    where?: MessageRoomWhereInput
  }


  /**
   * MessageRoom: findUniqueOrThrow
   */
  export type MessageRoomFindUniqueOrThrowArgs = MessageRoomFindUniqueArgsBase
      

  /**
   * MessageRoom: findFirstOrThrow
   */
  export type MessageRoomFindFirstOrThrowArgs = MessageRoomFindFirstArgsBase
      

  /**
   * MessageRoom without action
   */
  export type MessageRoomArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    avatar: 'avatar',
    token42_api: 'token42_api',
    username: 'username',
    email: 'email',
    phoneNumber: 'phoneNumber',
    tokenGoogle_api: 'tokenGoogle_api',
    tokenSms_api: 'tokenSms_api',
    losses: 'losses',
    wins: 'wins',
    ladder_level: 'ladder_level'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserInRoomScalarFieldEnum: {
    userId: 'userId',
    roomId: 'roomId',
    user_role: 'user_role'
  };

  export type UserInRoomScalarFieldEnum = (typeof UserInRoomScalarFieldEnum)[keyof typeof UserInRoomScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    password: 'password'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const MessageRoomScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    from: 'from',
    to_room: 'to_room',
    content_msg: 'content_msg',
    wasRead: 'wasRead'
  };

  export type MessageRoomScalarFieldEnum = (typeof MessageRoomScalarFieldEnum)[keyof typeof MessageRoomScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    avatar?: StringNullableFilter | string | null
    token42_api?: StringFilter | string
    username?: StringFilter | string
    email?: StringNullableFilter | string | null
    phoneNumber?: StringNullableFilter | string | null
    tokenGoogle_api?: StringNullableFilter | string | null
    tokenSms_api?: StringNullableFilter | string | null
    losses?: IntFilter | number
    wins?: IntFilter | number
    ladder_level?: IntFilter | number
    rooms?: UserInRoomListRelationFilter
    messages?: MessageRoomListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    avatar?: SortOrder
    token42_api?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    tokenGoogle_api?: SortOrder
    tokenSms_api?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
    rooms?: UserInRoomOrderByRelationAggregateInput
    messages?: MessageRoomOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    token42_api?: string
    username?: string
    email?: string
    phoneNumber?: string
    tokenGoogle_api?: string
    tokenSms_api?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    avatar?: SortOrder
    token42_api?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    tokenGoogle_api?: SortOrder
    tokenSms_api?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    avatar?: StringNullableWithAggregatesFilter | string | null
    token42_api?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    tokenGoogle_api?: StringNullableWithAggregatesFilter | string | null
    tokenSms_api?: StringNullableWithAggregatesFilter | string | null
    losses?: IntWithAggregatesFilter | number
    wins?: IntWithAggregatesFilter | number
    ladder_level?: IntWithAggregatesFilter | number
  }

  export type UserInRoomWhereInput = {
    AND?: Enumerable<UserInRoomWhereInput>
    OR?: Enumerable<UserInRoomWhereInput>
    NOT?: Enumerable<UserInRoomWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    roomId?: IntFilter | number
    user_role?: StringFilter | string
  }

  export type UserInRoomOrderByWithRelationInput = {
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    room?: RoomOrderByWithRelationInput
    roomId?: SortOrder
    user_role?: SortOrder
  }

  export type UserInRoomWhereUniqueInput = {
    userId_roomId?: UserInRoomUserIdRoomIdCompoundUniqueInput
  }

  export type UserInRoomOrderByWithAggregationInput = {
    userId?: SortOrder
    roomId?: SortOrder
    user_role?: SortOrder
    _count?: UserInRoomCountOrderByAggregateInput
    _avg?: UserInRoomAvgOrderByAggregateInput
    _max?: UserInRoomMaxOrderByAggregateInput
    _min?: UserInRoomMinOrderByAggregateInput
    _sum?: UserInRoomSumOrderByAggregateInput
  }

  export type UserInRoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserInRoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserInRoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserInRoomScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    roomId?: IntWithAggregatesFilter | number
    user_role?: StringWithAggregatesFilter | string
  }

  export type RoomWhereInput = {
    AND?: Enumerable<RoomWhereInput>
    OR?: Enumerable<RoomWhereInput>
    NOT?: Enumerable<RoomWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    users?: UserInRoomListRelationFilter
    password?: StringFilter | string
    messages?: MessageRoomListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    users?: UserInRoomOrderByRelationAggregateInput
    password?: SortOrder
    messages?: MessageRoomOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type MessageRoomWhereInput = {
    AND?: Enumerable<MessageRoomWhereInput>
    OR?: Enumerable<MessageRoomWhereInput>
    NOT?: Enumerable<MessageRoomWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    from?: IntFilter | number
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    to_room?: IntFilter | number
    content_msg?: StringFilter | string
    wasRead?: BoolFilter | boolean
  }

  export type MessageRoomOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    from?: SortOrder
    room?: RoomOrderByWithRelationInput
    to_room?: SortOrder
    content_msg?: SortOrder
    wasRead?: SortOrder
  }

  export type MessageRoomWhereUniqueInput = {
    id?: number
  }

  export type MessageRoomOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    from?: SortOrder
    to_room?: SortOrder
    content_msg?: SortOrder
    wasRead?: SortOrder
    _count?: MessageRoomCountOrderByAggregateInput
    _avg?: MessageRoomAvgOrderByAggregateInput
    _max?: MessageRoomMaxOrderByAggregateInput
    _min?: MessageRoomMinOrderByAggregateInput
    _sum?: MessageRoomSumOrderByAggregateInput
  }

  export type MessageRoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageRoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageRoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageRoomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    from?: IntWithAggregatesFilter | number
    to_room?: IntWithAggregatesFilter | number
    content_msg?: StringWithAggregatesFilter | string
    wasRead?: BoolWithAggregatesFilter | boolean
  }

  export type UserCreateInput = {
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
    rooms?: UserInRoomCreateNestedManyWithoutUserInput
    messages?: MessageRoomCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
    rooms?: UserInRoomUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    rooms?: UserInRoomUpdateManyWithoutUserNestedInput
    messages?: MessageRoomUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    rooms?: UserInRoomUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
  }

  export type UserUpdateManyMutationInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type UserInRoomCreateInput = {
    user: UserCreateNestedOneWithoutRoomsInput
    room: RoomCreateNestedOneWithoutUsersInput
    user_role: string
  }

  export type UserInRoomUncheckedCreateInput = {
    userId: number
    roomId: number
    user_role: string
  }

  export type UserInRoomUpdateInput = {
    user?: UserUpdateOneRequiredWithoutRoomsNestedInput
    room?: RoomUpdateOneRequiredWithoutUsersNestedInput
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomCreateManyInput = {
    userId: number
    roomId: number
    user_role: string
  }

  export type UserInRoomUpdateManyMutationInput = {
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateInput = {
    name: string
    type: string
    users?: UserInRoomCreateNestedManyWithoutRoomInput
    password: string
    messages?: MessageRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    users?: UserInRoomUncheckedCreateNestedManyWithoutRoomInput
    password: string
    messages?: MessageRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    users?: UserInRoomUpdateManyWithoutRoomNestedInput
    password?: StringFieldUpdateOperationsInput | string
    messages?: MessageRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    users?: UserInRoomUncheckedUpdateManyWithoutRoomNestedInput
    password?: StringFieldUpdateOperationsInput | string
    messages?: MessageRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    name: string
    type: string
    password: string
  }

  export type RoomUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomCreateInput = {
    createdAt: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    room: RoomCreateNestedOneWithoutMessagesInput
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomUncheckedCreateInput = {
    id?: number
    createdAt: Date | string
    from: number
    to_room: number
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    room?: RoomUpdateOneRequiredWithoutMessagesNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: IntFieldUpdateOperationsInput | number
    to_room?: IntFieldUpdateOperationsInput | number
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageRoomCreateManyInput = {
    id?: number
    createdAt: Date | string
    from: number
    to_room: number
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: IntFieldUpdateOperationsInput | number
    to_room?: IntFieldUpdateOperationsInput | number
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserInRoomListRelationFilter = {
    every?: UserInRoomWhereInput
    some?: UserInRoomWhereInput
    none?: UserInRoomWhereInput
  }

  export type MessageRoomListRelationFilter = {
    every?: MessageRoomWhereInput
    some?: MessageRoomWhereInput
    none?: MessageRoomWhereInput
  }

  export type UserInRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    token42_api?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    tokenGoogle_api?: SortOrder
    tokenSms_api?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    token42_api?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    tokenGoogle_api?: SortOrder
    tokenSms_api?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    token42_api?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    tokenGoogle_api?: SortOrder
    tokenSms_api?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RoomRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type UserInRoomUserIdRoomIdCompoundUniqueInput = {
    userId: number
    roomId: number
  }

  export type UserInRoomCountOrderByAggregateInput = {
    userId?: SortOrder
    roomId?: SortOrder
    user_role?: SortOrder
  }

  export type UserInRoomAvgOrderByAggregateInput = {
    userId?: SortOrder
    roomId?: SortOrder
  }

  export type UserInRoomMaxOrderByAggregateInput = {
    userId?: SortOrder
    roomId?: SortOrder
    user_role?: SortOrder
  }

  export type UserInRoomMinOrderByAggregateInput = {
    userId?: SortOrder
    roomId?: SortOrder
    user_role?: SortOrder
  }

  export type UserInRoomSumOrderByAggregateInput = {
    userId?: SortOrder
    roomId?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type MessageRoomCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    from?: SortOrder
    to_room?: SortOrder
    content_msg?: SortOrder
    wasRead?: SortOrder
  }

  export type MessageRoomAvgOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to_room?: SortOrder
  }

  export type MessageRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    from?: SortOrder
    to_room?: SortOrder
    content_msg?: SortOrder
    wasRead?: SortOrder
  }

  export type MessageRoomMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    from?: SortOrder
    to_room?: SortOrder
    content_msg?: SortOrder
    wasRead?: SortOrder
  }

  export type MessageRoomSumOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to_room?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserInRoomCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutUserInput>, Enumerable<UserInRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutUserInput>
    createMany?: UserInRoomCreateManyUserInputEnvelope
    connect?: Enumerable<UserInRoomWhereUniqueInput>
  }

  export type MessageRoomCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type UserInRoomUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutUserInput>, Enumerable<UserInRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutUserInput>
    createMany?: UserInRoomCreateManyUserInputEnvelope
    connect?: Enumerable<UserInRoomWhereUniqueInput>
  }

  export type MessageRoomUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserInRoomUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutUserInput>, Enumerable<UserInRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserInRoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserInRoomCreateManyUserInputEnvelope
    set?: Enumerable<UserInRoomWhereUniqueInput>
    disconnect?: Enumerable<UserInRoomWhereUniqueInput>
    delete?: Enumerable<UserInRoomWhereUniqueInput>
    connect?: Enumerable<UserInRoomWhereUniqueInput>
    update?: Enumerable<UserInRoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserInRoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserInRoomScalarWhereInput>
  }

  export type MessageRoomUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserInRoomUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutUserInput>, Enumerable<UserInRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserInRoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserInRoomCreateManyUserInputEnvelope
    set?: Enumerable<UserInRoomWhereUniqueInput>
    disconnect?: Enumerable<UserInRoomWhereUniqueInput>
    delete?: Enumerable<UserInRoomWhereUniqueInput>
    connect?: Enumerable<UserInRoomWhereUniqueInput>
    update?: Enumerable<UserInRoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserInRoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserInRoomScalarWhereInput>
  }

  export type MessageRoomUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutRoomsInput = {
    create?: XOR<UserCreateWithoutRoomsInput, UserUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoomCreateWithoutUsersInput, RoomUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutUsersInput
    connect?: RoomWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRoomsNestedInput = {
    create?: XOR<UserCreateWithoutRoomsInput, UserUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsInput
    upsert?: UserUpsertWithoutRoomsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRoomsInput, UserUncheckedUpdateWithoutRoomsInput>
  }

  export type RoomUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoomCreateWithoutUsersInput, RoomUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutUsersInput
    upsert?: RoomUpsertWithoutUsersInput
    connect?: RoomWhereUniqueInput
    update?: XOR<RoomUpdateWithoutUsersInput, RoomUncheckedUpdateWithoutUsersInput>
  }

  export type UserInRoomCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutRoomInput>, Enumerable<UserInRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutRoomInput>
    createMany?: UserInRoomCreateManyRoomInputEnvelope
    connect?: Enumerable<UserInRoomWhereUniqueInput>
  }

  export type MessageRoomCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type UserInRoomUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutRoomInput>, Enumerable<UserInRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutRoomInput>
    createMany?: UserInRoomCreateManyRoomInputEnvelope
    connect?: Enumerable<UserInRoomWhereUniqueInput>
  }

  export type MessageRoomUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type UserInRoomUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutRoomInput>, Enumerable<UserInRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<UserInRoomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: UserInRoomCreateManyRoomInputEnvelope
    set?: Enumerable<UserInRoomWhereUniqueInput>
    disconnect?: Enumerable<UserInRoomWhereUniqueInput>
    delete?: Enumerable<UserInRoomWhereUniqueInput>
    connect?: Enumerable<UserInRoomWhereUniqueInput>
    update?: Enumerable<UserInRoomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<UserInRoomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<UserInRoomScalarWhereInput>
  }

  export type MessageRoomUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserInRoomUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<UserInRoomCreateWithoutRoomInput>, Enumerable<UserInRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<UserInRoomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<UserInRoomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: UserInRoomCreateManyRoomInputEnvelope
    set?: Enumerable<UserInRoomWhereUniqueInput>
    disconnect?: Enumerable<UserInRoomWhereUniqueInput>
    delete?: Enumerable<UserInRoomWhereUniqueInput>
    connect?: Enumerable<UserInRoomWhereUniqueInput>
    update?: Enumerable<UserInRoomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<UserInRoomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<UserInRoomScalarWhereInput>
  }

  export type MessageRoomUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMessagesInput
    connect?: RoomWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type RoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMessagesInput
    upsert?: RoomUpsertWithoutMessagesInput
    connect?: RoomWhereUniqueInput
    update?: XOR<RoomUpdateWithoutMessagesInput, RoomUncheckedUpdateWithoutMessagesInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserInRoomCreateWithoutUserInput = {
    room: RoomCreateNestedOneWithoutUsersInput
    user_role: string
  }

  export type UserInRoomUncheckedCreateWithoutUserInput = {
    roomId: number
    user_role: string
  }

  export type UserInRoomCreateOrConnectWithoutUserInput = {
    where: UserInRoomWhereUniqueInput
    create: XOR<UserInRoomCreateWithoutUserInput, UserInRoomUncheckedCreateWithoutUserInput>
  }

  export type UserInRoomCreateManyUserInputEnvelope = {
    data: Enumerable<UserInRoomCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MessageRoomCreateWithoutUserInput = {
    createdAt: Date | string
    room: RoomCreateNestedOneWithoutMessagesInput
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt: Date | string
    to_room: number
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomCreateOrConnectWithoutUserInput = {
    where: MessageRoomWhereUniqueInput
    create: XOR<MessageRoomCreateWithoutUserInput, MessageRoomUncheckedCreateWithoutUserInput>
  }

  export type MessageRoomCreateManyUserInputEnvelope = {
    data: Enumerable<MessageRoomCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserInRoomUpsertWithWhereUniqueWithoutUserInput = {
    where: UserInRoomWhereUniqueInput
    update: XOR<UserInRoomUpdateWithoutUserInput, UserInRoomUncheckedUpdateWithoutUserInput>
    create: XOR<UserInRoomCreateWithoutUserInput, UserInRoomUncheckedCreateWithoutUserInput>
  }

  export type UserInRoomUpdateWithWhereUniqueWithoutUserInput = {
    where: UserInRoomWhereUniqueInput
    data: XOR<UserInRoomUpdateWithoutUserInput, UserInRoomUncheckedUpdateWithoutUserInput>
  }

  export type UserInRoomUpdateManyWithWhereWithoutUserInput = {
    where: UserInRoomScalarWhereInput
    data: XOR<UserInRoomUpdateManyMutationInput, UserInRoomUncheckedUpdateManyWithoutRoomsInput>
  }

  export type UserInRoomScalarWhereInput = {
    AND?: Enumerable<UserInRoomScalarWhereInput>
    OR?: Enumerable<UserInRoomScalarWhereInput>
    NOT?: Enumerable<UserInRoomScalarWhereInput>
    userId?: IntFilter | number
    roomId?: IntFilter | number
    user_role?: StringFilter | string
  }

  export type MessageRoomUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageRoomWhereUniqueInput
    update: XOR<MessageRoomUpdateWithoutUserInput, MessageRoomUncheckedUpdateWithoutUserInput>
    create: XOR<MessageRoomCreateWithoutUserInput, MessageRoomUncheckedCreateWithoutUserInput>
  }

  export type MessageRoomUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageRoomWhereUniqueInput
    data: XOR<MessageRoomUpdateWithoutUserInput, MessageRoomUncheckedUpdateWithoutUserInput>
  }

  export type MessageRoomUpdateManyWithWhereWithoutUserInput = {
    where: MessageRoomScalarWhereInput
    data: XOR<MessageRoomUpdateManyMutationInput, MessageRoomUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessageRoomScalarWhereInput = {
    AND?: Enumerable<MessageRoomScalarWhereInput>
    OR?: Enumerable<MessageRoomScalarWhereInput>
    NOT?: Enumerable<MessageRoomScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    from?: IntFilter | number
    to_room?: IntFilter | number
    content_msg?: StringFilter | string
    wasRead?: BoolFilter | boolean
  }

  export type UserCreateWithoutRoomsInput = {
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
    messages?: MessageRoomCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoomsInput = {
    id?: number
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
    messages?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoomsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomsInput, UserUncheckedCreateWithoutRoomsInput>
  }

  export type RoomCreateWithoutUsersInput = {
    name: string
    type: string
    password: string
    messages?: MessageRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    type: string
    password: string
    messages?: MessageRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutUsersInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutUsersInput, RoomUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutRoomsInput = {
    update: XOR<UserUpdateWithoutRoomsInput, UserUncheckedUpdateWithoutRoomsInput>
    create: XOR<UserCreateWithoutRoomsInput, UserUncheckedCreateWithoutRoomsInput>
  }

  export type UserUpdateWithoutRoomsInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    messages?: MessageRoomUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    messages?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomUpsertWithoutUsersInput = {
    update: XOR<RoomUpdateWithoutUsersInput, RoomUncheckedUpdateWithoutUsersInput>
    create: XOR<RoomCreateWithoutUsersInput, RoomUncheckedCreateWithoutUsersInput>
  }

  export type RoomUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    messages?: MessageRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    messages?: MessageRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserInRoomCreateWithoutRoomInput = {
    user: UserCreateNestedOneWithoutRoomsInput
    user_role: string
  }

  export type UserInRoomUncheckedCreateWithoutRoomInput = {
    userId: number
    user_role: string
  }

  export type UserInRoomCreateOrConnectWithoutRoomInput = {
    where: UserInRoomWhereUniqueInput
    create: XOR<UserInRoomCreateWithoutRoomInput, UserInRoomUncheckedCreateWithoutRoomInput>
  }

  export type UserInRoomCreateManyRoomInputEnvelope = {
    data: Enumerable<UserInRoomCreateManyRoomInput>
    skipDuplicates?: boolean
  }

  export type MessageRoomCreateWithoutRoomInput = {
    createdAt: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomUncheckedCreateWithoutRoomInput = {
    id?: number
    createdAt: Date | string
    from: number
    content_msg: string
    wasRead: boolean
  }

  export type MessageRoomCreateOrConnectWithoutRoomInput = {
    where: MessageRoomWhereUniqueInput
    create: XOR<MessageRoomCreateWithoutRoomInput, MessageRoomUncheckedCreateWithoutRoomInput>
  }

  export type MessageRoomCreateManyRoomInputEnvelope = {
    data: Enumerable<MessageRoomCreateManyRoomInput>
    skipDuplicates?: boolean
  }

  export type UserInRoomUpsertWithWhereUniqueWithoutRoomInput = {
    where: UserInRoomWhereUniqueInput
    update: XOR<UserInRoomUpdateWithoutRoomInput, UserInRoomUncheckedUpdateWithoutRoomInput>
    create: XOR<UserInRoomCreateWithoutRoomInput, UserInRoomUncheckedCreateWithoutRoomInput>
  }

  export type UserInRoomUpdateWithWhereUniqueWithoutRoomInput = {
    where: UserInRoomWhereUniqueInput
    data: XOR<UserInRoomUpdateWithoutRoomInput, UserInRoomUncheckedUpdateWithoutRoomInput>
  }

  export type UserInRoomUpdateManyWithWhereWithoutRoomInput = {
    where: UserInRoomScalarWhereInput
    data: XOR<UserInRoomUpdateManyMutationInput, UserInRoomUncheckedUpdateManyWithoutUsersInput>
  }

  export type MessageRoomUpsertWithWhereUniqueWithoutRoomInput = {
    where: MessageRoomWhereUniqueInput
    update: XOR<MessageRoomUpdateWithoutRoomInput, MessageRoomUncheckedUpdateWithoutRoomInput>
    create: XOR<MessageRoomCreateWithoutRoomInput, MessageRoomUncheckedCreateWithoutRoomInput>
  }

  export type MessageRoomUpdateWithWhereUniqueWithoutRoomInput = {
    where: MessageRoomWhereUniqueInput
    data: XOR<MessageRoomUpdateWithoutRoomInput, MessageRoomUncheckedUpdateWithoutRoomInput>
  }

  export type MessageRoomUpdateManyWithWhereWithoutRoomInput = {
    where: MessageRoomScalarWhereInput
    data: XOR<MessageRoomUpdateManyMutationInput, MessageRoomUncheckedUpdateManyWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesInput = {
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
    rooms?: UserInRoomCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: number
    avatar?: string | null
    token42_api: string
    username: string
    email?: string | null
    phoneNumber?: string | null
    tokenGoogle_api?: string | null
    tokenSms_api?: string | null
    losses: number
    wins: number
    ladder_level: number
    rooms?: UserInRoomUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type RoomCreateWithoutMessagesInput = {
    name: string
    type: string
    users?: UserInRoomCreateNestedManyWithoutRoomInput
    password: string
  }

  export type RoomUncheckedCreateWithoutMessagesInput = {
    id?: number
    name: string
    type: string
    users?: UserInRoomUncheckedCreateNestedManyWithoutRoomInput
    password: string
  }

  export type RoomCreateOrConnectWithoutMessagesInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    rooms?: UserInRoomUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    token42_api?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    tokenGoogle_api?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSms_api?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    rooms?: UserInRoomUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomUpsertWithoutMessagesInput = {
    update: XOR<RoomUpdateWithoutMessagesInput, RoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<RoomCreateWithoutMessagesInput, RoomUncheckedCreateWithoutMessagesInput>
  }

  export type RoomUpdateWithoutMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    users?: UserInRoomUpdateManyWithoutRoomNestedInput
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    users?: UserInRoomUncheckedUpdateManyWithoutRoomNestedInput
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomCreateManyUserInput = {
    roomId: number
    user_role: string
  }

  export type MessageRoomCreateManyUserInput = {
    id?: number
    createdAt: Date | string
    to_room: number
    content_msg: string
    wasRead: boolean
  }

  export type UserInRoomUpdateWithoutUserInput = {
    room?: RoomUpdateOneRequiredWithoutUsersNestedInput
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomUncheckedUpdateWithoutUserInput = {
    roomId?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomUncheckedUpdateManyWithoutRoomsInput = {
    roomId?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutMessagesNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageRoomUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    to_room?: IntFieldUpdateOperationsInput | number
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageRoomUncheckedUpdateManyWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    to_room?: IntFieldUpdateOperationsInput | number
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserInRoomCreateManyRoomInput = {
    userId: number
    user_role: string
  }

  export type MessageRoomCreateManyRoomInput = {
    id?: number
    createdAt: Date | string
    from: number
    content_msg: string
    wasRead: boolean
  }

  export type UserInRoomUpdateWithoutRoomInput = {
    user?: UserUpdateOneRequiredWithoutRoomsNestedInput
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomUncheckedUpdateWithoutRoomInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type UserInRoomUncheckedUpdateManyWithoutUsersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUpdateWithoutRoomInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageRoomUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: IntFieldUpdateOperationsInput | number
    content_msg?: StringFieldUpdateOperationsInput | string
    wasRead?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}